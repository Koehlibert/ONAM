ensembleIdx = j))
tmp_plot_data_main3 <-
rbind(tmp_plot_data_main3,
data.frame(x = X[,3],
y = tmpRes$finalTotalPredictions[,"X3"],
ensembleIdx = j))
tmp_plot_data_inter1 <-
rbind(tmp_plot_data_inter1,
data.frame(x1 = X[,1],
x2 = X[,2],
y = tmpRes$finalTotalPredictions[,"X1_X2"],
ensembleIdx = j))
tmp_plot_data_inter2 <-
rbind(tmp_plot_data_inter2,
data.frame(x1 = X[,1],
x2 = X[,3],
y = tmpRes$finalTotalPredictions[,"X1_X3"],
ensembleIdx = j))
tmp_plot_data_inter3 <-
rbind(tmp_plot_data_inter3,
data.frame(x1 = X[,2],
x2 = X[,3],
y = tmpRes$finalTotalPredictions[,"X2_X3"],
ensembleIdx = j))
}
SettingString <- paste("n_", n, "_Eff_",
paste(nonLinFIdx, collapse = "_"),
sep = "")
trueFileName <- paste("./ONAM/UniformFeatureResults_New/", SettingString,
"_TRUE.RDS", sep = "")
trueDat <- readRDS(trueFileName)
tmp_true_data_main1 <- data.frame(x = trueDat[,1],
y = trueDat[,4],
ensembleIdx = "True")
tmp_plot_data_main1 <- tmp_plot_data_main1 %>%
mutate(ensembleIdx = factor(ensembleIdx))
mean_plot_data_main1 <- tmp_plot_data_main1 %>%
group_by(x) %>% summarize(y = mean(y)) %>%
mutate(ensembleIdx = "Mean")
tmp_plot_data_main1 <- rbind(tmp_plot_data_main1, mean_plot_data_main1,
tmp_true_data_main1)
tmp_true_data_main2 <- data.frame(x = trueDat[,2],
y = trueDat[,5],
ensembleIdx = "True")
tmp_plot_data_main2 <- tmp_plot_data_main2 %>%
mutate(ensembleIdx = factor(ensembleIdx))
mean_plot_data_main2 <- tmp_plot_data_main2 %>%
group_by(x) %>% summarize(y = mean(y)) %>%
mutate(ensembleIdx = "Mean")
tmp_plot_data_main2 <- rbind(tmp_plot_data_main2, mean_plot_data_main2,
tmp_true_data_main2)
tmp_true_data_main3 <- data.frame(x = trueDat[,3],
y = trueDat[,6],
ensembleIdx = "True")
tmp_plot_data_main3 <- tmp_plot_data_main3 %>%
mutate(ensembleIdx = factor(ensembleIdx))
mean_plot_data_main3 <- tmp_plot_data_main3 %>%
group_by(x) %>% summarize(y = mean(y)) %>%
mutate(ensembleIdx = "Mean")
tmp_plot_data_main3 <- rbind(tmp_plot_data_main3, mean_plot_data_main3,
tmp_true_data_main3)
tmp_idx <- (iOuter - 1) * 3 + 1
tmp_idx_inter <- (iOuter - 1) * 6 + 1
#Graphic parameters
group_colors = c(rep("steelblue",nSim),"royalblue", "grey15")
names(group_colors) <- c(as.character(1:nSim), "Mean", "True")
group_alphas = c(rep(0.5, nSim), 1, 1)
plot_list_main[[2 - iSetting %% 2]][[tmp_idx]] <-
# plot_list_main[[1]][[tmp_idx]] <-
ggplot(tmp_plot_data_main1, aes(x = x, y = y, color = ensembleIdx,
alpha = ensembleIdx)) +
labs(title = plot_labels_main[tmp_idx]) +
plot_theme_main +
geom_line() +
scale_color_manual(values = group_colors,
breaks = c("1", "Mean",
"True"),
labels = c("Estimate", "Mean estimate",
"True function")) +
scale_alpha_manual(values = group_alphas,
guide = "none") +
labs(color = "") +
xlab(TeX("$X_{1}$")) +
ylab(TeX("$f_{1}(X_{1})$"))
plot_list_main[[2 - iSetting %% 2]][[tmp_idx + 1]] <-
# plot_list_main[[1]][[tmp_idx + 1]] <-
ggplot(tmp_plot_data_main2, aes(x = x, y = y, color = ensembleIdx,
alpha = ensembleIdx)) +
labs(title = plot_labels_main[tmp_idx + 1]) +
plot_theme_main +
geom_line() +
scale_color_manual(values = group_colors,
breaks = c("1", "Mean",
"True"),
labels = c("Estimate", "Mean estimate",
"True function")) +
scale_alpha_manual(values = group_alphas,
guide = "none") +
labs(color = "") +
xlab(TeX("$X_{2}$")) +
ylab(TeX("$f_{2}(X_{2})$"))
plot_list_main[[2 - iSetting %% 2]][[tmp_idx + 2]] <-
# plot_list_main[[1]][[tmp_idx + 2]] <-
ggplot(tmp_plot_data_main3, aes(x = x, y = y, color = ensembleIdx,
alpha = ensembleIdx)) +
labs(title = plot_labels_main[tmp_idx + 2]) +
plot_theme_main +
geom_line() +
scale_color_manual(values = group_colors,
breaks = c("1", "Mean",
"True"),
labels = c("Estimate", "Mean estimate",
"True function")) +
scale_alpha_manual(values = group_alphas,
guide = "none") +
labs(color = "") +
xlab(TeX("$X_{3}$")) +
ylab(TeX("$f_{3}(X_{3})$"))
plot_data_inter1_mean <-
get_average_data_inter(tmp_plot_data_inter1)
tmp_true_data_inter1 <-
data.frame(x1 = trueDat$X1,
x2 = trueDat$X2,
y = trueDat$X7)
plot_data_inter1_true <-
get_average_data_inter(tmp_true_data_inter1)
yMin1 <- min(plot_data_inter1_mean$Prediction, plot_data_inter1_true$Prediction)
yMax1 <- max(plot_data_inter1_mean$Prediction, plot_data_inter1_true$Prediction)
yMean1 <- mean(c(plot_data_inter1_mean$Prediction, plot_data_inter1_true$Prediction))
color_scale_1 <- inter_color_scale(yMin1, yMax1, yMean1)
plot_list_inter[[2 - iSetting %% 2]][[tmp_idx_inter]] <-
# plot_list_inter[[1]][[tmp_idx_inter]] <-
ggplot(plot_data_inter1_mean, aes(x = x, y = y, fill = Prediction)) +
# geom_point(size = 0.75) +
geom_tile() +
labs(title = plot_labels_inter[tmp_idx_inter]) +
plot_theme_inter +
# scale_fill_gradientn(colors = customColors(n = 100)) +
color_scale_1 +
xlab(TeX("$X_{1}$")) +
ylab(TeX("$X_{2}$"))
plot_list_inter[[2 - iSetting %% 2]][[tmp_idx_inter + 1]] <-
# plot_list_inter[[1]][[tmp_idx_inter + 1]] <-
ggplot(plot_data_inter1_true, aes(x = x, y = y, fill = Prediction)) +
# geom_point(size = 0.75) +
geom_tile() +
labs(title = plot_labels_inter[tmp_idx_inter + 1]) +
plot_theme_inter +
# scale_fill_gradientn(colors = customColors(n = 100)) +
color_scale_1 +
xlab(TeX("$X_{1}$")) +
ylab(TeX("$X_{2}$"))
plot_data_inter2_mean <-
get_average_data_inter(tmp_plot_data_inter2)
tmp_true_data_inter2 <-
data.frame(x1 = trueDat$X1,
x2 = trueDat$X3,
y = trueDat$X8)
plot_data_inter2_true <-
get_average_data_inter(tmp_true_data_inter2)
yMin2 <- min(plot_data_inter2_mean$Prediction, plot_data_inter2_true$Prediction)
yMax2 <- max(plot_data_inter2_mean$Prediction, plot_data_inter2_true$Prediction)
yMean2 <- mean(c(plot_data_inter2_mean$Prediction, plot_data_inter2_true$Prediction))
color_scale_2 <- inter_color_scale(yMin2, yMax2, yMean2)
plot_list_inter[[2 - iSetting %% 2]][[tmp_idx_inter + 2]] <-
# plot_list_inter[[1]][[tmp_idx_inter + 2]] <-
ggplot(plot_data_inter2_mean, aes(x = x, y = y, fill = Prediction)) +
# geom_point(size = 0.75) +
geom_tile() +
labs(title = plot_labels_inter[tmp_idx_inter + 2]) +
plot_theme_inter +
# scale_fill_gradientn(colors = customColors(n = 100)) +
color_scale_2 +
xlab(TeX("$X_{1}$")) +
ylab(TeX("$X_{3}$"))
plot_list_inter[[2 - iSetting %% 2]][[tmp_idx_inter + 3]] <-
# plot_list_inter[[1]][[tmp_idx_inter + 3]] <-
ggplot(plot_data_inter2_true, aes(x = x, y = y, fill = Prediction)) +
# geom_point(size = 0.75) +
geom_tile() +
labs(title = plot_labels_inter[tmp_idx_inter + 3]) +
plot_theme_inter +
# scale_fill_gradientn(colors = customColors(n = 100)) +
color_scale_2 +
xlab(TeX("$X_{1}$")) +
ylab(TeX("$X_{3}$"))
plot_data_inter3_mean <-
get_average_data_inter(tmp_plot_data_inter3)
tmp_true_data_inter3 <-
data.frame(x1 = trueDat$X2,
x2 = trueDat$X3,
y = trueDat$X9)
plot_data_inter3_true <-
get_average_data_inter(tmp_true_data_inter3)
yMin3 <- min(plot_data_inter3_mean$Prediction, plot_data_inter3_true$Prediction)
yMax3 <- max(plot_data_inter3_mean$Prediction, plot_data_inter3_true$Prediction)
yMean3 <- mean(c(plot_data_inter3_mean$Prediction, plot_data_inter3_true$Prediction))
color_scale_3 <- inter_color_scale(yMin3, yMax3, yMean3)
plot_list_inter[[2 - iSetting %% 2]][[tmp_idx_inter + 4]] <-
# plot_list_inter[[1]][[tmp_idx_inter + 4]] <-
ggplot(plot_data_inter3_mean, aes(x = x, y = y, fill = Prediction)) +
# geom_point(size = 0.75) +
geom_tile() +
labs(title = plot_labels_inter[tmp_idx_inter + 4]) +
plot_theme_inter +
# scale_fill_gradientn(colors = customColors(n = 100)) +
color_scale_3 +
xlab(TeX("$X_{2}$")) +
ylab(TeX("$X_{3}$"))
plot_list_inter[[2 - iSetting %% 2]][[tmp_idx_inter + 5]] <-
# plot_list_inter[[1]][[tmp_idx_inter + 5]] <-
ggplot(plot_data_inter3_true, aes(x = x, y = y, fill = Prediction)) +
# geom_point(size = 0.75) +
geom_tile() +
labs(title = plot_labels_inter[tmp_idx_inter + 5]) +
plot_theme_inter +
# scale_fill_gradientn(colors = customColors(n = 100)) +
color_scale_3 +
xlab(TeX("$X_{2}$")) +
ylab(TeX("$X_{3}$"))
}
}
names(plot_list_main[[1]]) <- letters[1:length(plot_list_main[[1]])]
names(plot_list_main[[2]]) <- letters[1:length(plot_list_main[[2]])]
plot_layout_main <-
c("aaabbbccc
aaabbbccc
dddeeefff
dddeeefff
ggghhhiii
ggghhhiii")
big_plot_n_main_2000 <-
wrap_plots(plot_list_main[[1]], guides = "collect",
design = plot_layout_main) & theme(legend.position = "bottom")
ggsave("sim_main_n_2000.pdf",
big_plot_n_main_2000,
device = "pdf",
width = 9, height = 10)
big_plot_n_main_5000 <-
wrap_plots(plot_list_main[[2]], guides = "collect",
design = plot_layout_main) & theme(legend.position = "bottom")
ggsave("sim_main_n_5000.pdf",
big_plot_n_main_5000,
device = "pdf",
width = 9, height = 10)
names(plot_list_inter[[1]]) <-
letters[1:length(plot_list_inter[[1]])]
names(plot_list_inter[[2]]) <-
letters[1:length(plot_list_inter[[2]])]
plot_layout_inter <-
c("aaabbb
aaabbb
cccddd
cccddd
eeefff
eeefff
ggghhh
ggghhh
iiijjj
iiijjj
kkklll
kkklll
mmmnnn
mmmnnn
oooppp
oooppp
qqqrrr
qqqrrr")
# big_plot_n_inter_2000 <-
#   wrap_plots(plot_list_inter[[1]], guides = "collect",
#              design = plot_layout_inter) &
#   theme(legend.position = "none")
big_plot_n_inter_2000 <-
ggarrange(plotlist = plot_list_inter[[1]],
ncol = 2,
nrow = 9)
ggsave("sim_inter_n_2000.pdf",
big_plot_n_inter_2000,
device = "pdf",
width = 6, height = 20)
# big_plot_n_inter_5000 <-
#   wrap_plots(plot_list_inter[[1]], guides = "collect",
#              design = plot_layout_inter) &
#   theme(legend.position = "none")
big_plot_n_inter_5000 <-
ggarrange(plotlist = plot_list_inter[[2]],
ncol = 2,
nrow = 9)
ggsave("sim_inter_n_5000.pdf",
big_plot_n_inter_5000,
device = "pdf",
width = 6, height = 20)
big_plot_n_inter_5000 <-
ggarrange(plotlist = plot_list_inter[[1]],
ncol = 2,
nrow = 9)
setwd("./ONAM")
#Initial Setup####
rm(list = ls())
gc()
set.seed(111)
library(mvtnorm)
library(MASS)
#Hyperparameters####
nSim <- 10
p <- 10
n_Big <- 10000
p_inf <- 3
n_inter <- factorial(p_inf)/(2*factorial(p_inf - 2))
# AllNet <- TRUE
# noisy <- TRUE
# regularize <- TRUE
nVals <- c(2000, 5000)
Effects <- c(1,2,3)
# noiseVals <- c(0.1,0.5,1)
# simSetting <- expand.grid(nVals, Effects, noiseVals)
simSetting <- expand.grid(nVals, Effects)
#DGP####
# betasToSample <- seq(-3, 3, by = 0.5)[-7]
lotf <- list(function(x) cos(2*x),
function(x) tanh(0.5*x),
function(x) -x^3,
function(x) cos(x*3-2)*(-x*3),
function(x) ifelse(x > 0, pweibull(x, shape = 3),
pweibull(-x, shape = 0.5)),
function(x) x^2,
function(x) sin(x)*cos(x),
function(x) sqrt(abs(x)),
function(x) dnorm(x)-0.125,
function(x) -x * tanh(3*x) * sin(4*x))
interf <- list(function(x1, x2) x1 * (-x2),
function(x1, x2) sin(0.1*x1) * exp(x2),
function(x1, x2) (x1 - 1) * sqrt(abs(x2 + x1)),
function(x1, x2) cos(0.1*x1) * sqrt(abs(x2)),
function(x1, x2) ifelse(x1 > 0, sqrt(abs(x2)), x2),
function(x1, x2) sqrt(x1^2 + x2^2),
function(x1, x2) cos(x1) * x2^3,
function(x1, x2) exp(0.5*x1) * sqrt(abs(x2-1)),
function(x1, x2) sqrt((x1 - 2)^2 + (x2 + 1) ^2))
globalTerm <- function(x)
{
return(sqrt(sum(x^2)))
}
varEstimations <- readRDS("varEstimations.rds")
# Sigma <- matrix(0.5, ncol = p, nrow = p)
# diag(Sigma) <- 1
# Z <- mvrnorm(1000000, mu = rep(0,p), Sigma = Sigma)
# X <- (pnorm(Z) - 0.5) * 6
# lotFVars <-
#   sapply(1:length(lotf), function(i)
#     var(lotf[[i]](X[,i])))
# interFVars <- sapply(1:length(interf), function(i)
#   var(interf[[i]](X[,switch(i, 1,1,2,4,4,5,7,7,8)],
#                   X[,switch(i, 2,3,3,5,6,6,8,9,9)])))
# globalTermVar <- var(apply(X, 1, globalTerm))
# cor(X) # ca. 0.48
#Model regularization####
#Run Simulation####
for(iSetting in 1:nrow(simSetting))
# for(iSetting in 3:3)
{
#Simulation setting####
n <- simSetting[iSetting, 1]
nonLinFIdx <- 3 * (simSetting[iSetting, 2] - 1) + 1:3
interFIdx <- 3 * (simSetting[iSetting, 2] - 1) + 1:3
sigmaMat <- matrix(0.5, nrow = p, ncol = p)
diag(sigmaMat) <- 1
X_tmp <- mvrnorm(n_Big, rep(0, p), sigmaMat)
X_Big <-
apply(X_tmp, 2,
function(x) pnorm(x) * 6 - 3)
colnames(X_Big) <- paste("X", 1:p, sep = "")
#purify effects to get only nonlinear part#####
interFPre <- lapply(1:n_inter, function(i)
{
function(x1, x2) interf[[interFIdx[i]]](x1, x2) #/ sqrt(interFVars[interFIdx[i]])
# ONAM:::purifyInterFunction(i, interf = interf,
#                            interFIdx = interFIdx, X = X_Big)
})
nonLinFPre <- lapply(1:p_inf, function(i)
{
function(x) lotf[[nonLinFIdx[i]]](x) #/ sqrt(lotFVars[interFIdx[i]])
# ONAM:::purifyNonLinFunction(i, lotf = lotf, nonLinFIdx = nonLinFIdx,
#                             X = X_Big)
})
PHOList <-
ONAM:::stackedOrthFunction(nonLinFPre, interFPre, 0.1,
X_Big, globalTerm)
nonLinF <- lapply(1:p_inf,
function(i)
scale(PHOList$nonLinF[[i]] /
sqrt(varEstimations[nonLinFIdx[i]]), scale = FALSE))
interF <- lapply(1:n_inter,
function(i)
scale(PHOList$interF[[i]] /
sqrt(varEstimations[9 + interFIdx[i]]), scale = FALSE))
globalF <- scale(PHOList$globalF / sqrt(varEstimations[19 + iSetting %/% 3]),
scale = FALSE)
# noisesd <- simSetting[iSetting, 3]
# SettingString <- paste("n_", n, "_Eff_",
#                        paste(nonLinFIdx, collapse = "_"),
#                        "_sd_", noisesd, sep = "")
trueDF <-
data.frame(matrix(c(X_Big[,1:3],
unlist(nonLinF), unlist(interF), globalF),
ncol = 10))
SettingString <- paste("n_", n, "_Eff_",
paste(nonLinFIdx, collapse = "_"),
sep = "")
trueFileName <- paste("./UniformFeatureResults_New/", SettingString,
"_TRUE.RDS", sep = "")
saveRDS(trueDF, trueFileName)
for(j in 1:nSim)
{
# if(iSetting == 17 & j < 5)
# {
#   next
# }
progressPercent <- ((iSetting - 1)*nSim + j)/
(nrow(simSetting) * nSim)*100
# progressPercent <- ((iSetting - 1)*nSim + j)/
# (3 * nSim)*100
cat('\r',paste0(progressPercent, "% complete"))
flush.console()
#create data####
# x_sample <- 1:n_Big
x_sample <- sample(1:n_Big, n)
originalData <- X_Big[x_sample,]
#Generate data####
Y <- rep(0, n_Big)
# Y <- X %*% trueBetas
for(idx in 1:p_inf)
{
Y <- Y + nonLinF[[idx]]
}
for(idx in 1:n_inter)
{
Y <- Y + interF[[idx]]
}
Y <- Y + globalF
Y_all <- Y
Y <- Y[x_sample]
# if(noisy)
# {
#   noise <- rnorm(n, sd = noisesd)
#   Y <- Y + noise
# }
originalData <- cbind(originalData, Y)
colnames(originalData) <- c(paste("X", 1:p, sep = ""), "Y")
modelFormula <-
formula(Y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 +
deep_model(X1) + deep_model(X2) + deep_model(X3) +
deep_model(X1, X2) + deep_model(X1, X3) + deep_model(X2, X3) +
deep_model(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10))
list_of_deep_models =
list(deep_model = ONAM:::getSubModel,
deep_model1 = function(inputs)
ONAM:::getSubModel(inputs, regularizer = keras::regularizer_l1_l2(0.001, 0.001)),
deep_model2 = function(inputs)
ONAM:::getSubModel(inputs, regularizer = keras::regularizer_l1_l2(0.0125, 0.0125)),
deep_model10 = function(inputs)
ONAM:::getSubModel(inputs, regularizer = keras::regularizer_l1_l2(0.05, 0.05)))
modelRunTime <-
system.time({modelRes <-
ONAM:::fitPHOModel(modelFormula, list_of_deep_models,
originalData, 1)})
modelEvalData <-
ONAM:::evaluateModelSimulation(modelRes, X_Big, Y)
modelEvalData <- c(modelEvalData,
modelRunTime = list(modelRunTime))
resFileName <- paste("./UniformFeatureResults_New/", SettingString, "_run_", j, ".RDS", sep = "")
saveRDS(modelEvalData, file = resFileName)
}
}
originalData <- X_Big
nonLinMatList <-
lapply(seq_along(nonLinFPre),
function(idx)
{
nonLinFPre[[idx]](originalData[,idx])
})
nonLinMat <- matrix(unlist(nonLinMatList), ncol = length(nonLinMatList))
IntMatList <-
lapply(seq_along(interFPre),
function(idx)
{
relData <- originalData[,combn(1:p_inf, 2)[,idx]]
x1 <- relData[,1]
x2 <- relData[,2]
return(interFPre[[idx]](x1, x2))
})
IntMat <- matrix(unlist(IntMatList), ncol = length(IntMatList))
globalTermValues <- apply(originalData, 1, globalTerm)
DesMat <- cbind(1, nonLinMat, IntMat)
P <- DesMat %*% solve(t(DesMat)%*%DesMat) %*% t(DesMat)
z1z2 <- solve(t(DesMat)%*%DesMat) %*% t(DesMat) %*% globalTermValues
PHOglobalTermValues <- globalTermValues - P %*% globalTermValues
PHODesMat <- DesMat + sweep(DesMat, 2, rowSums(z1z2), "*")
#Orthog Inter Vs NonLin
IntMat2 <- PHODesMat[,5:7]
DesMat2 <- PHODesMat[,1:4]
P2 <- DesMat2 %*% solve(t(DesMat2)%*%DesMat2) %*% t(DesMat2)
z1z2_2 <- solve(t(DesMat2)%*%DesMat2) %*% t(DesMat2) %*% IntMat2
PHOIntMat2 <- IntMat2 - P2 %*% IntMat2
PHODesMat2 <- DesMat2 + sweep(DesMat2, 2, rowSums(z1z2_2), "*")
finalPHOMat <- cbind(PHONonLinMat, PHOIntMat2, PHODesMat2)
finalPHOMat <- cbind(PHODesMat2, PHOIntMat2, PHOglobalTermValues)
test <- var(finalPHOMat)
View(test)
finalPHOMat <- cbind(PHODesMat2[,2:4], PHOIntMat2, PHOglobalTermValues)
gc()
gc()
