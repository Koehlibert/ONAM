geom_rug(sides = "b", width = unit(0.025, "npc"))
PHOPlot
PHOPlot <- plotEffectGenericPost(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
geom_rug(sides = "b", height = unit(0.025, "npc"))
PHOPlot <- plotEffectGenericPost(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
geom_rug(sides = "b", length = unit(0.025, "npc"))
PHOPlot
PHOPlot <- plotEffectGenericPost(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
geom_rug(sides = "b", length = unit(0.0125, "npc"))
PHOPlot
PHOPlot <- plotEffectGenericPost(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
geom_rug(sides = "b", length = unit(0.5, "npc"))
PHOPlot
PHOPlot <- plotEffectGenericPost(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
geom_rug(sides = "b")
PHOPlot
ale$set.feature(featureName)
AlePlot <- ale$plot()
AlePlot
test <- ggplot_build(AlePlot)
View(test)
rugData <- ggplot_build(AlePlot)$data[[2]]
View(test)
PHOPlot <- plotEffectGenericPost(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
geom_rug(data = rugData, sides = "b")
PHOPlot
View(rugData)
View(test)
PHOPlot <- plotEffectGenericPost(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
geom_rug(sides = "b", alpha = rugData$alpha, linetype = rugData$linetype)
PHOPlot
PHOPlot <- plotEffectGenericPost(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
geom_rug(sides = "b", alpha = rugData$alpha, linetype = rugData$linetype,
linewidth = rugData$linewidth)
PHOPlot
library(iml)
library(ranger)
library(pdp)
library(ggpubr)
setwd("//imbie-fs/Projekte/Biostatistik/Projekte_Koehler/Deepregression/Keras Stacked Orthogonalization LA/")
source("FunctionsOrthoTest//KerasFunctionsSource.R")
BIBIEvalData <- readRDS("BIBIEvalData.RDS")
load(file = "rangerRF_BIBI.RData")
load(file = "BIBItrainData.RData")
BIBIPred <- rangerRF_BIBI$predictions
model <- Predictor$new(rangerRF_BIBI, data = train, y = BIBIPred)
imp <- FeatureImp$new(model, loss = "mae")
ale <- FeatureEffect$new(model, feature = "Forest", method = "ale")
pdp <- FeatureEffect$new(model, feature = "Forest", method = "pdp")
ice <- FeatureEffect$new(model, feature = "Forest", method = "ice")
allFeatures <- colnames(train)[-1]
for(featureName in allFeatures)
{
if((typeof(train[[featureName]]) != "double") |
!featureName %in% names(BIBIEvalData$totalFeaturePredsPost))
{
next
}
ale$set.feature(featureName)
pdp$set.feature(featureName)
ice$set.feature(featureName)
AlePlot <- ale$plot()
rugData <- ggplot_build(AlePlot)$data[[2]]
PdpPlot <- pdp$plot()
IcePlot <- ice$plot()
PHOPlot <- plotEffectGenericPost(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
geom_rug(sides = "b", alpha = rugData$alpha, linetype = rugData$linetype,
linewidth = rugData$linewidth)
# PHOPlotPre <- plotEffectGenericPre(BIBIEvalData, featureName)
combinedPlot <- ggarrange(AlePlot, PdpPlot, IcePlot, PHOPlot,
ncol = 2, nrow = 2)
ggsave(paste(featureName, "_ICE_Combined.pdf", sep = ""), combinedPlot,
device = "pdf",
width = 8, height = 6)
PHOPlotSub <- plotSingleModels(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
geom_rug(sides = "b", alpha = rugData$alpha, linetype = rugData$linetype,
linewidth = rugData$linewidth)
# PHOPlotPre <- plotEffectGenericPre(BIBIEvalData, featureName)
ggsave(paste(featureName, "_SubModels.pdf", sep = ""), PHOPlotSub,
device = "pdf",
width = 8, height = 6)
}
PHOPlotSub <- plotSingleModels(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
geom_rug(sides = "b", alpha = rugData$alpha, linetype = rugData$linetype,
linewidth = rugData$linewidth)
PHOPlotSub
PHOPlotSub <- plotSingleModels(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
geom_rug(data = rugData,sides = "b",
alpha = rugData$alpha, linetype = rugData$linetype,
linewidth = rugData$linewidth)
PHOPlotSub
PHOPlotSub <- plotSingleModels(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
geom_rug(data = rugData,sides = "b", aes(x = x, y = y),
alpha = rugData$alpha, linetype = rugData$linetype,
linewidth = rugData$linewidth)
PHOPlotSub
PHOPlotSub <- plotSingleModels(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
geom_rug(sides = "b")
PHOPlotSub
rlang::last_trace()
PHOPlotSub <- plotSingleModels(BIBIEvalData, featureName) +
theme(legend.position = "none") +
xlab(featureName) + ylab("Main Effect") +
geom_rug(sides = "b")
PHOPlotSub
PHOPlotSub <- plotSingleModels(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
theme(legend.position = "none") +
geom_rug(data = rugData, sides = "b", aes(x = x, y = y),
alpha = rugData$alpha, linetype = rugData$linetype,
linewidth = rugData$linewidth)
PHOPlotSub
PHOPlotSub <- plotSingleModels(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
theme(legend.position = "none") +
geom_rug(data = rugData, sides = "b", aes(x = x, y = -Inf),
alpha = rugData$alpha, linetype = rugData$linetype,
linewidth = rugData$linewidth)
PHOPlotSub
rugData$x
PHOPlotSub <- plotSingleModels(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
theme(legend.position = "none") +
geom_rug(data = rugData, sides = "b", aes(x = x),
alpha = rugData$alpha, linetype = rugData$linetype,
linewidth = rugData$linewidth)
PHOPlotSub
PHOPlotSub <- plotSingleModels(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
theme(legend.position = "none") +
geom_rug(data = rugData, sides = "b", aes(x = x, colour = "black"),
alpha = rugData$alpha, linetype = rugData$linetype,
linewidth = rugData$linewidth)
PHOPlotSub
PHOPlotSub <- plotSingleModels(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
theme(legend.position = "none") +
geom_rug(data = rugData, sides = "b", aes(x = x, colour = "black"),
alpha = rugData$alpha, linetype = rugData$linetype, color = "black",
linewidth = rugData$linewidth)
PHOPlotSub
PHOPlotSub <- plotSingleModels(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
theme(legend.position = "none") +
geom_rug(data = rugData, sides = "b", aes(x = x),
alpha = rugData$alpha, linetype = rugData$linetype, color = "black",
linewidth = rugData$linewidth)
PHOPlotSub
library(iml)
library(ranger)
library(pdp)
library(ggpubr)
setwd("//imbie-fs/Projekte/Biostatistik/Projekte_Koehler/Deepregression/Keras Stacked Orthogonalization LA/")
source("FunctionsOrthoTest//KerasFunctionsSource.R")
BIBIEvalData <- readRDS("BIBIEvalData.RDS")
load(file = "rangerRF_BIBI.RData")
load(file = "BIBItrainData.RData")
BIBIPred <- rangerRF_BIBI$predictions
model <- Predictor$new(rangerRF_BIBI, data = train, y = BIBIPred)
imp <- FeatureImp$new(model, loss = "mae")
ale <- FeatureEffect$new(model, feature = "Forest", method = "ale")
pdp <- FeatureEffect$new(model, feature = "Forest", method = "pdp")
ice <- FeatureEffect$new(model, feature = "Forest", method = "ice")
allFeatures <- colnames(train)[-1]
for(featureName in allFeatures)
{
if((typeof(train[[featureName]]) != "double") |
!featureName %in% names(BIBIEvalData$totalFeaturePredsPost))
{
next
}
ale$set.feature(featureName)
pdp$set.feature(featureName)
ice$set.feature(featureName)
AlePlot <- ale$plot()
rugData <- ggplot_build(AlePlot)$data[[2]]
PdpPlot <- pdp$plot()
IcePlot <- ice$plot()
PHOPlot <- plotEffectGenericPost(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
geom_rug(sides = "b", alpha = rugData$alpha, linetype = rugData$linetype,
linewidth = rugData$linewidth)
# PHOPlotPre <- plotEffectGenericPre(BIBIEvalData, featureName)
combinedPlot <- ggarrange(AlePlot, PdpPlot, IcePlot, PHOPlot,
ncol = 2, nrow = 2)
ggsave(paste(featureName, "_ICE_Combined.pdf", sep = ""), combinedPlot,
device = "pdf",
width = 8, height = 6)
PHOPlotSub <- plotSingleModels(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
theme(legend.position = "none") +
geom_rug(data = rugData, sides = "b", aes(x = x),
alpha = rugData$alpha, linetype = rugData$linetype, color = "black",
linewidth = rugData$linewidth)
# PHOPlotPre <- plotEffectGenericPre(BIBIEvalData, featureName)
ggsave(paste(featureName, "_SubModels.pdf", sep = ""), PHOPlotSub,
device = "pdf",
width = 8, height = 6)
}
modelInteraction <- Interaction$new(model)
modelInteraction$plot()
partial_results_elevation_Agriculture <-
pdp::partial(rangerRF_BIBI, pred.var = c("elevation", "Agriculture"))
elevAgriPlot <- plotPartial(partial_results_elevation_Agriculture)
elevAgriPlotPHO <-
plotInteractionEffectGenericPost(BIBIEvalData,
"Agriculture", "elevation") +
coord_flip() + ylab("elevation") + xlab("Agriculture")
combinedPlot <- ggarrange(elevAgriPlot, elevAgriPlotPHO,
ncol = 2)
ggsave("elevAgriPlot.pdf", combinedPlot,
device = "pdf",
width = 11, height = 6)
partial_results_elevation_Development <-
pdp::partial(rangerRF_BIBI, pred.var = c("elevation", "Development"))
elevDevelPlot <- plotPartial(partial_results_elevation_Development)
elevDevelPlotPHO <-
plotInteractionEffectGenericPost(BIBIEvalData,
"Development", "elevation") +
coord_flip() + ylab("elevation") + xlab("Development")
combinedPlot <- ggarrange(elevDevelPlot, elevDevelPlotPHO,
ncol = 2)
ggsave("elevDevelPlot.pdf", combinedPlot,
device = "pdf",
width = 11, height = 6)
partial_results_Development_Agriculture <-
pdp::partial(rangerRF_BIBI, pred.var = c("Development", "Agriculture"))
DevelAgriPlot <- plotPartial(partial_results_Development_Agriculture)
DevelAgriPlotPHO <-
plotInteractionEffectGenericPost(BIBIEvalData,
"Agriculture", "Development") +
coord_flip() + ylab("Development") + xlab("Agriculture")
combinedPlot <- ggarrange(DevelAgriPlot, DevelAgriPlotPHO,
ncol = 2)
ggsave("DevelAgriPlot.pdf", combinedPlot,
device = "pdf",
width = 11, height = 6)
partial_results_LongLat <-
pdp::partial(rangerRF_BIBI, pred.var = c("Longitude", "Latitude"))
LongLatPlot <- plotPartial(partial_results_LongLat)
LongLatPlotPHO <-
plotInteractionEffectGenericPost(BIBIEvalData,
"Longitude", "Latitude") +
ylab("Latitude") + xlab("Longitude")
combinedPlot <- ggarrange(LongLatPlot, LongLatPlotPHO,
ncol = 2)
ggsave("LongLatPlot.pdf", combinedPlot,
device = "pdf",
width = 11, height = 6)
allPreds <- matrix(BIBIEvalData$totalFeaturePredsPost %>% unlist(),
ncol = length(BIBIEvalData$totalFeaturePredsPost))
totalVar2 <- abs(var(rowSums(allPreds)))
varDecomp <- var(allPreds)
totalVar <- sum(abs(varDecomp))
ResVar <- abs(varDecomp[1,1])
InterVar <- sum(abs(varDecomp[2:5, 2:5]))
mainVar <- sum(abs(varDecomp[6:24, 6:24]))
featureName
featureName <- "Development"
ale$set.feature(featureName)
pdp$set.feature(featureName)
ice$set.feature(featureName)
AlePlot <- ale$plot()
rugData <- ggplot_build(AlePlot)$data[[2]]
PdpPlot <- pdp$plot()
IcePlot <- ice$plot()
AlePlot$scales$scales
AlePlot$layers
AlePlot$labels
AlePlot
rugData
PdpPlot
pdp$results
test <- pdp$results
View(test)
ale$results$.value <- ale$results$.value %>% scale(scale = FALSE)
pdp$results$.value <- pdp$results$.value %>% scale(scale = FALSE)
ale$results$.value <- ale$results$.value %>% scale(scale = FALSE)
ale$set.feature(featureName)
ale$results$.value <- ale$results$.value %>% scale(scale = FALSE)
pdp$set.feature(featureName)
pdp$results$.value <- pdp$results$.value %>% scale(scale = FALSE)
ice$set.feature(featureName)
ice$results$.value <- ice$results$.value %>% scale(scale = FALSE)
AlePlot <- ale$plot()
rugData <- ggplot_build(AlePlot)$data[[2]]
PdpPlot <- pdp$plot()
IcePlot <- ice$plot()
PHOPlot <- plotEffectGenericPost(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
geom_rug(sides = "b", alpha = rugData$alpha, linetype = rugData$linetype,
linewidth = rugData$linewidth)
# PHOPlotPre <- plotEffectGenericPre(BIBIEvalData, featureName)
combinedPlot <- ggarrange(AlePlot, PdpPlot, IcePlot, PHOPlot,
ncol = 2, nrow = 2)
combinedPlot
mean(AlePlot$data$.value)
mean(PdpPlot$data$.value)
View(partial_results_elevation_Development)
plot(ale$results$Development, pdp$results$Development)
length(ale$results$Development)
length(pdp$results$Development)
View(pdp$results)
length(PdpPlot$data$Development)
test <- ggplot_build(PdpPlot)
View(test)
ale$results$.value
mean(ale$results$.value)
AlePlot
PdpPlot
featureName <- "AreaSqKm"
pdp$set.feature(featureName)
allFeatures
featureName <- "AreaSqKM"
pdp$set.feature(featureName)
PdpPlot <- pdp$plot()
PdpPlot
pdp$results$.value <- pdp$results$.value %>% scale(scale = FALSE)
PdpPlot <- pdp$plot()
PdpPlot
PdpPlot
ice$set.feature(featureName)
ice$results$.value <- ice$results$.value %>% scale(scale = FALSE)
ale$set.feature(featureName)
ale$results$.value <- ale$results$.value %>% scale(scale = FALSE)
pdp$set.feature(featureName)
pdp$results$.value <- pdp$results$.value %>% scale(scale = FALSE)
ice$set.feature(featureName)
ice$results$.value <- ice$results$.value %>% scale(scale = FALSE)
AlePlot <- ale$plot()
rugData <- ggplot_build(AlePlot)$data[[2]]
PdpPlot <- pdp$plot()
IcePlot <- ice$plot()
PHOPlot <- plotEffectGenericPost(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
geom_rug(sides = "b", alpha = rugData$alpha, linetype = rugData$linetype,
linewidth = rugData$linewidth)
# PHOPlotPre <- plotEffectGenericPre(BIBIEvalData, featureName)
combinedPlot <- ggarrange(AlePlot, PdpPlot, IcePlot, PHOPlot,
ncol = 2, nrow = 2)
combinedPlot
library(iml)
library(ranger)
library(pdp)
library(ggpubr)
setwd("//imbie-fs/Projekte/Biostatistik/Projekte_Koehler/Deepregression/Keras Stacked Orthogonalization LA/")
source("FunctionsOrthoTest//KerasFunctionsSource.R")
BIBIEvalData <- readRDS("BIBIEvalData.RDS")
load(file = "rangerRF_BIBI.RData")
load(file = "BIBItrainData.RData")
BIBIPred <- rangerRF_BIBI$predictions
model <- Predictor$new(rangerRF_BIBI, data = train, y = BIBIPred)
imp <- FeatureImp$new(model, loss = "mae")
ale <- FeatureEffect$new(model, feature = "Forest", method = "ale")
pdp <- FeatureEffect$new(model, feature = "Forest", method = "pdp")
ice <- FeatureEffect$new(model, feature = "Forest", method = "ice")
allFeatures <- colnames(train)[-1]
for(featureName in allFeatures)
{
if((typeof(train[[featureName]]) != "double") |
!featureName %in% names(BIBIEvalData$totalFeaturePredsPost))
{
next
}
ale$set.feature(featureName)
ale$results$.value <- ale$results$.value %>% scale(scale = FALSE)
pdp$set.feature(featureName)
pdp$results$.value <- pdp$results$.value %>% scale(scale = FALSE)
ice$set.feature(featureName)
ice$results$.value <- ice$results$.value %>% scale(scale = FALSE)
AlePlot <- ale$plot()
rugData <- ggplot_build(AlePlot)$data[[2]]
PdpPlot <- pdp$plot()
IcePlot <- ice$plot()
PHOPlot <- plotEffectGenericPost(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
geom_rug(sides = "b", alpha = rugData$alpha, linetype = rugData$linetype,
linewidth = rugData$linewidth)
# PHOPlotPre <- plotEffectGenericPre(BIBIEvalData, featureName)
combinedPlot <- ggarrange(AlePlot, PdpPlot, IcePlot, PHOPlot,
ncol = 2, nrow = 2)
ggsave(paste(featureName, "_ICE_Combined.pdf", sep = ""), combinedPlot,
device = "pdf",
width = 8, height = 6)
PHOPlotSub <- plotSingleModels(BIBIEvalData, featureName) +
xlab(featureName) + ylab("Main Effect") +
theme(legend.position = "none") +
geom_rug(data = rugData, sides = "b", aes(x = x),
alpha = rugData$alpha, linetype = rugData$linetype, color = "black",
linewidth = rugData$linewidth)
# PHOPlotPre <- plotEffectGenericPre(BIBIEvalData, featureName)
ggsave(paste(featureName, "_SubModels.pdf", sep = ""), PHOPlotSub,
device = "pdf",
width = 8, height = 6)
}
partial_results_elevation_Agriculture <-
pdp::partial(rangerRF_BIBI, pred.var = c("elevation", "Agriculture"))
partial_results_elevation_Agriculture$yhat <-
partial_results_elevation_Agriculture$yhat %>% scale(scale = FALSE)
elevAgriPlot <- plotPartial(partial_results_elevation_Agriculture)
elevAgriPlotPHO <-
plotInteractionEffectGenericPost(BIBIEvalData,
"Agriculture", "elevation") +
coord_flip() + ylab("elevation") + xlab("Agriculture")
combinedPlot <- ggarrange(elevAgriPlot, elevAgriPlotPHO,
ncol = 2)
ggsave("elevAgriPlot.pdf", combinedPlot,
device = "pdf",
width = 11, height = 6)
partial_results_elevation_Development <-
pdp::partial(rangerRF_BIBI, pred.var = c("elevation", "Development"))
partial_results_elevation_Development$yhat <-
partial_results_elevation_Development$yhat %>% scale(scale = FALSE)
elevDevelPlot <- plotPartial(partial_results_elevation_Development)
elevDevelPlotPHO <-
plotInteractionEffectGenericPost(BIBIEvalData,
"Development", "elevation") +
coord_flip() + ylab("elevation") + xlab("Development")
combinedPlot <- ggarrange(elevDevelPlot, elevDevelPlotPHO,
ncol = 2)
ggsave("elevDevelPlot.pdf", combinedPlot,
device = "pdf",
width = 11, height = 6)
partial_results_Development_Agriculture <-
pdp::partial(rangerRF_BIBI, pred.var = c("Development", "Agriculture"))
partial_results_Development_Agriculture$yhat <-
partial_results_Development_Agriculture$yhat %>% scale(scale = FALSE)
DevelAgriPlot <- plotPartial(partial_results_Development_Agriculture)
DevelAgriPlotPHO <-
plotInteractionEffectGenericPost(BIBIEvalData,
"Agriculture", "Development") +
coord_flip() + ylab("Development") + xlab("Agriculture")
combinedPlot <- ggarrange(DevelAgriPlot, DevelAgriPlotPHO,
ncol = 2)
ggsave("DevelAgriPlot.pdf", combinedPlot,
device = "pdf",
width = 11, height = 6)
partial_results_LongLat <-
pdp::partial(rangerRF_BIBI, pred.var = c("Longitude", "Latitude"))
partial_results_LongLat$yhat <-
partial_results_LongLat$yhat %>% scale(scale = FALSE)
LongLatPlot <- plotPartial(partial_results_LongLat)
LongLatPlotPHO <-
plotInteractionEffectGenericPost(BIBIEvalData,
"Longitude", "Latitude") +
ylab("Latitude") + xlab("Longitude")
combinedPlot <- ggarrange(LongLatPlot, LongLatPlotPHO,
ncol = 2)
ggsave("LongLatPlot.pdf", combinedPlot,
device = "pdf",
width = 11, height = 6)
allPreds <- matrix(BIBIEvalData$totalFeaturePredsPost %>% unlist(),
ncol = length(BIBIEvalData$totalFeaturePredsPost))
totalVar2 <- abs(var(rowSums(allPreds)))
varDecomp <- var(allPreds)
totalVar <- sum(abs(varDecomp))
ResVar <- abs(varDecomp[1,1])
InterVar <- sum(abs(varDecomp[2:5, 2:5]))
mainVar <- sum(abs(varDecomp[6:24, 6:24]))
getwd()
rm(list = ls())
library(iml)
library(ranger)
library(pdp)
library(ggpubr)
setwd("//imbie-fs/Projekte/Biostatistik/Projekte_Koehler/Deepregression/Keras Stacked Orthogonalization LA/")
source("FunctionsOrthoTest//KerasFunctionsSource.R")
BIBIEvalData <- readRDS("BIBIEvalData.RDS")
load(file = "rangerRF_BIBI.RData")
load(file = "BIBItrainData.RData")
BIBIPred <- rangerRF_BIBI$predictions
originalData <- BIBIEvalData$data
n <- nrow(originalData)
.rs.restartR()
oldRes <- BIBIEvalData$totalFeaturePredsPre
warnings()
setwd("//imbie-fs/Projekte/Biostatistik/Projekte_Koehler/Deepregression/Keras Stacked Orthogonalization LA/")
setwd("//imbie-fs/Projekte/Biostatistik/Projekte_Koehler/Deepregression/ONAM/")
source("FunctionsOrthoTest//KerasFunctionsSource.R")
modelEvalData <- BIBIEvalData
colnames(modelEvalData$totalPredictions)
names(modelEvalData$totalPredictions)
View(modelEvalData)
.rs.restartR()
originalData <- modelEvalData$data
n <- nrow(originalData)
View(modelEvalData)
predictionData <- modelEvalData$predictionsData
predictionsData <- modelEvalData$predictionsData
rm(predictionData)
View(predictionsData)
length(unique(predictionsData$Effect))
predictionsData <- modelEvalData$predictionsData %>%
filter(PHO == "After")
length(unique(predictionsData$Effect))
#Initial Setup####
rm(list = ls())
gc()
